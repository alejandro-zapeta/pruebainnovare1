{"version":3,"sources":["components/cripto.js","components/acercamio.js","App.js","reducers/reducer.js","serviceWorker.js","index.js"],"names":["CriptoMonedas","this","props","criptomonedas1","cripto1","criptoz","loading","react_default","a","createElement","ListGroup","criptxo","map","cripto","ListGroupItem","name","Badge","color","pill","price_usd","React","Component","mapDispatchToProps","types","payload","request","url","connect","state","Home","Card","CardBody","CardTitle","CardSubtitle","CardImg","top","style","width","height","src","alt","CardText","CardLink","href","target","client","axios","create","baseURL","responseType","store","createStore","arguments","length","undefined","action","type","Object","objectSpread","data","error","applyMiddleware","axiosMiddleware","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","toggleNavbar","bind","assertThisInitialized","collapsed","setState","es","BrowserRouter","className","Navbar","light","NavbarToggler","onClick","NavbarBrand","Collapse","isOpen","navbar","Nav","NavItem","Link","to","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.22e8bb41.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { ListGroup, ListGroupItem, Badge } from 'reactstrap';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nfunction criptomonedas1() {\r\n  return {\r\n    \"types\": ['LOAD','AWESOME','OH_NO'],\r\n    \"payload\": {\"request\":{url:'/ticker/?limit=10'}}\r\n  }\r\n}\r\n\r\nclass CriptoMonedas extends React.Component {\r\n\r\n  componentDidMount() {\r\n     this.props.criptomonedas1();\r\n  }\r\n\r\n  render() {\r\n    var cripto1 = this.props.criptoz;\r\n    if(cripto1.loading === true)  return (<h1>OBTENIENDO LAS CRIPTOMONEDAS :) </h1>);\r\n    \r\n    return (\r\n      <ListGroup>{cripto1.criptxo.map(cripto => <ListGroupItem>{cripto.name} -  <Badge  color=\"success\" pill>USD {cripto.price_usd}</Badge></ListGroupItem>)}</ListGroup>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {return {\"criptoz\": state};};\r\nconst mapDispatchToProps = {criptomonedas1};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CriptoMonedas);","import React, { Component } from 'react';\r\nimport { Card, CardImg, CardText, CardBody, CardLink,CardTitle, CardSubtitle } from 'reactstrap';\r\n\r\nexport default class Home extends React.Component {\r\n  render() {\r\n    const img1 = {width: \"185px\", height: \"150px\"};\r\n    return (\r\n     <div>\r\n      <Card>\r\n      <CardBody>\r\n          <CardTitle><h1>Juan Alejandro Zapeta Pérez</h1></CardTitle>\r\n          <CardSubtitle>¡Bienvenido a mi prueba!</CardSubtitle>\r\n        </CardBody>\r\n       <center>\r\n        <CardImg top \r\n        style={img1}\r\n        src=\"https://scontent.fgua3-2.fna.fbcdn.net/v/t1.0-9/28467784_1900045070070896_458026677493707270_n.jpg?_nc_cat=104&_nc_ht=scontent.fgua3-2.fna&oh=43d2f1efd6f3dd1671e6c8cb848a625a&oe=5CD6F8A6\"\r\n         alt=\"Alejo Zapeta\" />\r\n       </center>\r\n        <CardBody>\r\n          <CardText>\r\n            Me llamo Juan Alejandro, tengo 26 años. Me encanta programar en Python :)\r\n            He programado en PythonWeb con tornado, python desktop con Tkinter. y demás \r\n            Te recomiendo pasar a checkar una app destkop que desarrollé en Python, es como un PostMan lite ;).\r\n            También pasar por un convertidor Web escrito en Tornado, y el frontEnd con BulmaCss y VueJs (verás que la carga inicial es muy muy rápida)\r\n          </CardText>\r\n           <CardLink href=\"mailto:alejandrozapeta@gmail.com\">Mi email: alejandrozapeta@gmail.com</CardLink>\r\n           <CardLink target=\"_blank\" href=\"https://github.com/zapetin52/apieasy/blob/master/apieasy\">\"PostMan\" Lite</CardLink>\r\n           <CardLink target=\"_blank\" href=\"https://myplaylist-youtubemp3.com/\">Convertidor Listas Online</CardLink>\r\n        </CardBody>\r\n      </Card>\r\n    </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\n\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem } from 'reactstrap';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport CriptoMonedas from './components/cripto.js';\nimport Home from './components/acercamio.js';\nimport reducers from './reducers/reducer.js';\n\nimport './App.css';\n\nimport { Provider } from 'react-redux';\nimport {createStore, applyMiddleware} from 'redux';\nimport axios from 'axios';\nimport axiosMiddleware from 'redux-axios-middleware';\n\nconst client = axios.create({ baseURL:'https://api.coinmarketcap.com/v1',responseType: 'json'});\n\nlet store = createStore(reducers, applyMiddleware(axiosMiddleware(client)))\n\n\nclass App extends Component {\n constructor(props) {\n    super(props);\n\n    this.toggleNavbar = this.toggleNavbar.bind(this);\n    this.state = {\n      collapsed: true\n    };\n  }\n\n  toggleNavbar() {\n    this.setState({\n      collapsed: !this.state.collapsed\n    });\n  }\n\n\n  render() {\n    return (\n      <Provider store={store}>\n      <Router>\n        <div className=\"App\">\n            <Navbar color=\"faded\" light>\n           \n            <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\n             <NavbarBrand href=\"/\" className=\"mr-auto\">AlejandroZapeta Prueba</NavbarBrand>\n            <Collapse isOpen={!this.state.collapsed} navbar>\n              <Nav navbar>\n                <NavItem>\n                 <Link to=\"/\">Acerca de mi</Link>\n                </NavItem>\n                <NavItem>\n                   <Link to=\"/criptomonedas\">CriptoMonedas</Link>\n                </NavItem>\n              </Nav>\n            </Collapse>\n          </Navbar>\n          <div>\n            <hr />\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/criptomonedas\" component={CriptoMonedas} />\n          </div>\n        </div>\n      </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","export default function reducer(state = { criptxo: [], \"loading\": true }, action) {\r\n  switch (action.type) {\r\n    case \"LOAD\":\r\n      return { ...state, loading: true };\r\n    case \"AWESOME\":\r\n      return { ...state, loading: false, criptxo: action.payload.data };\r\n    case \"OH_NO\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: 'No se pudo obtener los datos del API'\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport function criptomonedas() {\r\n  return {\r\n    \"types\": ['LOAD','AWESOME','OH_NO'],\r\n    \"payload\": {\r\n      \"request\":{url:'/ticker/?limit=10'}\r\n    }\r\n  }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}